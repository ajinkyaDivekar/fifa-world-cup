{"version":3,"sources":["logo.svg","component/catalog/sidebar/index.js","component/catalog/filters/index.js","component/catalog/products/index.js","component/catalog/index.js","stuff/basicRoute.js","common/Header.js","stuff/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sidebar","id","Component","Filters","Products","Catalog","title","class","BasicRoute","path","About","Users","Topics","Home","match","useRouteMatch","to","url","Topic","topicId","useParams","Header","Navbar","bg","Brand","href","Nav","className","Stuff","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,sMCEtBC,E,iLAEjB,OACE,yBAAKC,GAAG,WACN,6CACA,gDACA,8CACA,yCACA,8CACA,8CACA,mD,GAV6BC,aCAhBC,E,iLAEjB,OACE,yBAAKF,GAAG,WACN,2CACA,6BACE,wCACA,wCACA,yCAEF,iDACA,sCACA,gD,GAZ6BC,aCAhBE,E,iLAEjB,OACE,6C,GAHgCF,aCGjBG,G,uLAEjB,OACE,yBAAKJ,GAAG,WACJ,wBAAIK,MAAM,WAAV,iBACA,yBAAKC,MAAM,gBACT,6BAASA,MAAM,gBACb,kBAAC,EAAD,OAEF,6BAASA,MAAM,iBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GAXuBL,cCKtB,SAASM,IACtB,OACM,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,WACZ,kBAACG,EAAD,OAEF,kBAAC,IAAD,CAAOH,KAAK,KACV,kBAACI,EAAD,QAMV,SAASA,IACP,OAAO,oCAGT,SAASH,IACP,OAAO,qCAGT,SAASC,IACP,OAAO,qCAGT,SAASC,IACP,IAAIE,EAAQC,cAEZ,OACE,6BACE,sCAEA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAE,UAAKF,EAAMG,IAAX,gBAAR,eAEF,4BACE,kBAAC,IAAD,CAAMD,GAAE,UAAKF,EAAMG,IAAX,mBAAR,oBAUJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOR,KAAI,UAAKK,EAAML,KAAX,cACT,kBAACS,EAAD,OAEF,kBAAC,IAAD,CAAOT,KAAMK,EAAML,MACjB,yDAOV,SAASS,IAAS,IACVC,EAAYC,cAAZD,QACN,OAAO,mDAAyBA,G,oBC7EjB,SAASE,IACXN,cACX,OACE,oCACA,kBAACO,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,SAAnB,YACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAAC,IAAD,CAAMA,UAAU,WAAWX,GAAG,SAA9B,UACA,kBAAC,IAAD,CAAMW,UAAU,WAAWX,GAAG,YAA9B,aACA,kBAAC,IAAD,CAAMW,UAAU,WAAWX,GAAG,UAA9B,cACA,kBAAC,IAAD,CAAMW,UAAU,WAAWX,GAAG,UAA9B,WACA,kBAAC,IAAD,CAAMW,UAAU,WAAWX,GAAG,WAA9B,e,ICQKY,E,iLAVX,OACE,kBAAC,IAAD,KACE,kBAACP,EAAD,MACA,kBAACb,EAAD,W,GALYN,aCWL2B,MAVf,WAEE,OACE,yBAAKF,UAAU,OAEb,kBAAC,EAAD,QCJcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.641f51c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nexport default class Sidebar extends Component {\n  render() {\n    return (\n      <div id=\"sidebar\">\n        <div>Reset filter</div>\n        <div>Shop By Keyword</div>\n        <div>Shop BY Price</div>\n        <div>Shop All</div>\n        <div>Shop By Brand</div>\n        <div>Shop By Color</div>\n        <div>Shop By Stone</div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Filters extends Component {\n  render() {\n    return (\n      <div id=\"filters\">\n        <div>Tota items</div>\n        <div>\n          <span>Grid 1</span>\n          <span>Grid 2</span>\n          <span>Grid 3</span>\n        </div>\n        <div>Add to wishlist </div>\n        <div>Sort </div>\n        <div>Pagination</div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Products extends Component {\n  render() {\n    return (\n      <div>\n      Products\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Sidebar from './sidebar';\nimport Filters from './filters';\nimport Products from './products';\nimport './index.scss';\nexport default class Catalog extends Component {\n  render() {\n    return (\n      <div id=\"catalog\">\n          <h1 title=\"catalog\"> Catalog Page</h1>\n          <div class=\"catalog-page\">\n            <section class=\"left-section\">\n              <Sidebar />\n            </section>\n            <section class=\"right-section\">\n              <Filters />\n              <Products />\n            </section>\n          </div>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {\n  Switch,\n  Route,\n  useRouteMatch,\n  useParams,\n  Link\n} from \"react-router-dom\";\nimport Catalog from \"../component/catalog\";\n\nexport default function BasicRoute() {\n  return (\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/catalog\">\n            <Catalog />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/topics\">\n          <Topics />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n        </Switch>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nfunction Topics() {\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>\n            Props v. State\n          </Link>\n        </li>\n      </ul>\n\n      {/* The Topics page has its own <Switch> with more routes\n          that build on the /topics URL path. You can think of the\n          2nd <Route> here as an \"index\" page for all topics, or\n          the page that is shown when no topic is selected */}\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>;\n}\n\n\n// nested Route\n","import React, { Component } from 'react';\nimport {Navbar, Nav} from 'react-bootstrap';\nimport { Link, useRouteMatch} from \"react-router-dom\";\n  export default function Header() {\n   let match = useRouteMatch();\n    return (\n      <>\n      <Navbar bg=\"light\">\n        <Navbar.Brand href=\"#home\"> FIFA WC</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Link className=\"nav-link\" to=\"/home\"> Home </Link>\n          <Link className=\"nav-link\" to=\"/catalog\"> Catalog </Link>\n          <Link className=\"nav-link\" to=\"/about\"> Features </Link>\n          <Link className=\"nav-link\" to=\"/users\"> Users </Link>\n          <Link className=\"nav-link\" to=\"/topics\"> Topics </Link>\n        </Nav>\n      </Navbar>\n    </>\n    );\n\n}\n","import React, { Component } from 'react';\nimport {Navbar} from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport BasicRoute from './basicRoute';\nimport Header from '../common/Header';\nclass Stuff extends Component {\n  render() {\n    return (\n      <Router>\n        <Header />\n        <BasicRoute />\n      </Router>\n\n    );\n  }\n}\n\nexport default Stuff;","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n//nested Router\n// import { Link, useRouteMatch} from \"react-router-dom\";\n\n//basic Route - Browser\nimport Stuff from './stuff';\n\nfunction App() {\n  // let match = useRouteMatch();\n  return (\n    <div className=\"App\">\n      {/* Basic Router - Browser-router */}\n      <Stuff />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}