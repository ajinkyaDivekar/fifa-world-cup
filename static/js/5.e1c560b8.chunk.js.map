{"version":3,"sources":["component/catalog/products/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js"],"names":["Products","state","data","this","getData","brandFilter","props","console","log","fetch","response","json","setState","prevProps","prevState","id","map","el","key","href","src","images","brand","name","sku","length","nextProps","Component","module","exports","runtime","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","value","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/5.e1c560b8.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Products extends Component {\n  state = { data: [] };\n\n componentDidMount() {\n  this.getData();\n}\n\nasync getData() {\n  let {brandFilter} = this.props;\n  console.log('brandFilter', brandFilter)\n  brandFilter = brandFilter && 'brands[0]=' + brandFilter;\n  const response = await fetch(`https://opt-showcase-api-qa.optcentral.com/products?brand_ids=3,33,46,50,112,145,370,463,581,708,1119,1444,1797,1801,1809,1811,2086,2158,3512,3513,3522,3526,3528,3530&categories=earrings&limit=24&page=1&retailerId=143&showcase=OOO&sort=pricing.retail;desc&status=Active&${brandFilter}`);\n  const json = await response.json();\n  this.setState({ data: json.data });\n}\n\nstatic getDerivedStateFromProps(nextProps, prevState) {\n  console.log(nextProps, prevState,'getDerivedStateFromProps');\n  // this.getData();\n  return true\n}\n\ncomponentDidUpdate(prevProps, prevState) {\n  console.log(prevProps, prevState,'componentDidUpdate', this.props);\n  if(prevProps.brandFilter != this.props.brandFilter) {\n    this.getData()\n  }\n\n  return false;\n}\n\n  render() {\n    return (\n      <div id=\"products\">\n      <h1>Products</h1>\n        <ul>\n          {this.state.data.map(el => (\n            <li key={el.id}>\n              <div>\n                <a href=\"#\">\n                  <img src={el.images[0]}/>\n                </a><br/>\n                {el.brand.name}: {el.sku}\n              </div>\n            </li>\n          ))}\n\n          {!this.state.data.length && 'Products not Found!!!'}\n        </ul>\n      </div>\n    )\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}