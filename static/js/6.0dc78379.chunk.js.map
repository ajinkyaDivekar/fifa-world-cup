{"version":3,"sources":["component/catalog/sidebar/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js"],"names":["Sidebar","props","filterBrand","slug","el","value","context","console","log","filterFun","state","brandData","fetch","response","json","this","setState","id","Consumer","filterValue","map","key","_id","onClick","bind","name","Component","contextType","myContext","module","exports","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","Context","_invoke","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/6.0dc78379.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {myContext} from '../context';\nexport default class Sidebar extends Component {\n constructor(props) {\n   super(props)\n\n   this.state = {\n      brandData : []\n   }\n  //  this.filterBrand = this.filterBrand.bind(this);\n }\n\n async componentDidMount() {\n  const response = await fetch(`https://opt-showcase-api-qa.optcentral.com/brands?status=Active&visibility=LEFT&showcase=OOO&retailerId=143`);\n  const json = await response.json();\n  this.setState({ brandData: json || []});\n }\n\n\n\n\n  filterBrand = (slug, el) => {\n    let value = this.context;\n    console.log(el, slug,'slug')\n    value.filterFun(slug)\n  }\n\n  render() {\n    return (\n\n      <div id=\"sidebar\">\n      <myContext.Consumer>\n      {value => value.filterValue}\n    </myContext.Consumer>\n        <div>Reset filter</div>\n        <div>Shop By Keyword</div>\n        <div>Shop BY Price</div>\n        <div>Shop All</div>\n        <div>\n\n        <h4>Shop By Brand</h4>\n        <ul>\n        { this.state.brandData.map(el => {\n          return (\n            <li key={el._id} onClick= {this.filterBrand.bind(this,el.slug)}>\n            {el.name}\n            </li>\n          )\n        })\n      }\n\n      </ul>\n      </div>\n        <div>Shop By Color</div>\n        <div>Shop By Stone</div>\n      </div>\n\n    )\n  }\n}\nSidebar.contextType = myContext;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}