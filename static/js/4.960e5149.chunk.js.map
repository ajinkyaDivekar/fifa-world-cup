{"version":3,"sources":["component/catalog/ErrorBoundries.js","component/catalog/index.js","component/catalog/context.js"],"names":["ErrorBoundries","state","hasError","error","errorInfo","console","log","this","props","children","Component","Sidebar","lazy","Filters","Products","Catalog","filterFun","param","_mounted","setState","brandFilter","myContext","myObj","filterValue","Provider","value","fallback","id","title","className","React","createContext","test"],"mappings":"2MAEqBA,G,iNACnBC,MAAQ,CAAEC,UAAU,G,iFAOFC,EAAOC,GAGvBC,QAAQC,IAAIH,EAAMC,EAAU,e,+BAQ5B,OAAIG,KAAKN,MAAMC,SAEN,qDAIP,6BACGK,KAAKC,MAAMC,a,gDAxBcN,GAG9B,OAFAE,QAAQC,IAAIH,EAAM,4BAEX,CAAED,UAAU,O,GALqBQ,c,wCCG5C,IAAMC,EAAUC,gBAAK,kBAAM,iCACrBC,EAAUD,gBAAK,kBAAM,iCACrBE,EAAWF,gBAAK,kBAAM,iCACPG,E,YACnB,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAUPQ,UAAW,SAACC,GACXZ,QAAQC,IAAR,eAAiB,SACjB,EAAKY,UAAW,EACb,EAAKA,UACN,EAAKC,SAAS,CAACC,YAAaH,KAb9B,EAAKC,UAAW,EAChB,EAAKjB,MAAQ,CACXmB,YAAa,IAJE,E,oFAoBjBb,KAAKW,UAAW,I,+BAWhBb,QAAQC,IAAIe,KACZ,IAAIC,EAAQ,CACVC,YAAc,aACdP,UAAYT,KAAKS,WAGdI,EAAeb,KAAKN,MAApBmB,YACL,OACE,kBAAC,EAAD,KACA,kBAAC,IAAUI,SAAX,CAAoBC,MAASH,GAC7B,kBAAC,WAAD,CAAUI,SAAU,4CACpB,yBAAKC,GAAG,WAEJ,wBAAIC,MAAM,WAAV,iBACA,yBAAKC,UAAU,gBACb,6BAASA,UAAU,gBACjB,kBAAClB,EAAD,OAGF,6BAASkB,UAAU,iBACjB,kBAAChB,EAAD,MACA,kBAACC,EAAD,CAAUM,YAAaA,c,GArDAV,c,gCCRrC,6CAEaW,EAFb,OAEyBS,EAAMC,cAAc,CAACC,KAAK,U","file":"static/js/4.960e5149.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class ErrorBoundries extends Component {\n  state = { hasError: false };\n  static getDerivedStateFromError(error) {\n    console.log(error,'getDerivedStateFromError')\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n    console.log(error,errorInfo,'errorInfo')\n    /* this.setState({\n      error: error,\n      errorInfo: errorInfo\n    }) */\n  }\n  render() {\n\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return (\n      <div>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n","import React, { Component, Suspense, lazy } from 'react';\nimport { myContext } from './context';\nimport './index.scss';\nimport ErrorBoundries from './ErrorBoundries';\n\nconst Sidebar = lazy(() => import('./sidebar'));\nconst Filters = lazy(() => import('./filters'));\nconst Products = lazy(() => import('./products'));\nexport default class Catalog extends Component {\n  constructor(props) {\n    super(props)\n    this._mounted = false;\n    this.state = {\n      brandFilter: ''\n    }\n\n    // this.filterFun = this.filterFun.bind(this);\n  }\n\n\n   filterFun =(param) => {\n    console.log(this,'param');\n    this._mounted = true;\n    if(this._mounted){\n      this.setState({brandFilter: param})\n    }\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n\n /*   filterFun(params) {\n     console.log(this, 'this');\n    // var self = this;\n    console.log(params);\n    this.setState({brandFilter: params})\n  } */\n  render() {\n    console.log(myContext)\n    let myObj = {\n      filterValue : 'working...',\n      filterFun : this.filterFun\n    };\n\n    let {brandFilter} = this.state;\n    return (\n      <ErrorBoundries>\n      <myContext.Provider value = {myObj}>\n      <Suspense fallback={<div>Loading...</div>}>\n      <div id=\"catalog\">\n\n          <h1 title=\"catalog\"> Catalog Page</h1>\n          <div className=\"catalog-page\">\n            <section className=\"left-section\">\n              <Sidebar />\n\n            </section>\n            <section className=\"right-section\">\n              <Filters />\n              <Products brandFilter={brandFilter}/>\n            </section>\n          </div>\n      </div>\n\n\n      </Suspense>\n      </myContext.Provider>\n      </ErrorBoundries>\n    )\n  }\n}\n","import React from 'react';\n\nexport const myContext = React.createContext({test:'test'});\n\n// export default MyContext;"],"sourceRoot":""}